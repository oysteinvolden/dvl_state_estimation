// Generated by gencpp from file sbg_driver/SbgImuData.msg
// DO NOT EDIT!


#ifndef SBG_DRIVER_MESSAGE_SBGIMUDATA_H
#define SBG_DRIVER_MESSAGE_SBGIMUDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
//#include <sbg_driver/SbgImuStatus.h>
#include "SbgImuStatus.h"
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace sbg_driver
{
template <class ContainerAllocator>
struct SbgImuData_
{
  typedef SbgImuData_<ContainerAllocator> Type;

  SbgImuData_()
    : header()
    , time_stamp(0)
    , imu_status()
    , accel()
    , gyro()
    , temp(0.0)
    , delta_vel()
    , delta_angle()  {
    }
  SbgImuData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time_stamp(0)
    , imu_status(_alloc)
    , accel(_alloc)
    , gyro(_alloc)
    , temp(0.0)
    , delta_vel(_alloc)
    , delta_angle(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef  ::sbg_driver::SbgImuStatus_<ContainerAllocator>  _imu_status_type;
  _imu_status_type imu_status;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _accel_type;
  _accel_type accel;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _gyro_type;
  _gyro_type gyro;

   typedef float _temp_type;
  _temp_type temp;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _delta_vel_type;
  _delta_vel_type delta_vel;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _delta_angle_type;
  _delta_angle_type delta_angle;





  typedef boost::shared_ptr< ::sbg_driver::SbgImuData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sbg_driver::SbgImuData_<ContainerAllocator> const> ConstPtr;

}; // struct SbgImuData_

typedef ::sbg_driver::SbgImuData_<std::allocator<void> > SbgImuData;

typedef boost::shared_ptr< ::sbg_driver::SbgImuData > SbgImuDataPtr;
typedef boost::shared_ptr< ::sbg_driver::SbgImuData const> SbgImuDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sbg_driver::SbgImuData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sbg_driver::SbgImuData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sbg_driver::SbgImuData_<ContainerAllocator1> & lhs, const ::sbg_driver::SbgImuData_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.time_stamp == rhs.time_stamp &&
    lhs.imu_status == rhs.imu_status &&
    lhs.accel == rhs.accel &&
    lhs.gyro == rhs.gyro &&
    lhs.temp == rhs.temp &&
    lhs.delta_vel == rhs.delta_vel &&
    lhs.delta_angle == rhs.delta_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sbg_driver::SbgImuData_<ContainerAllocator1> & lhs, const ::sbg_driver::SbgImuData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sbg_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sbg_driver::SbgImuData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sbg_driver::SbgImuData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sbg_driver::SbgImuData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sbg_driver::SbgImuData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sbg_driver::SbgImuData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sbg_driver::SbgImuData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sbg_driver::SbgImuData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "59cc541d794c367e71030fa700720826";
  }

  static const char* value(const ::sbg_driver::SbgImuData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x59cc541d794c367eULL;
  static const uint64_t static_value2 = 0x71030fa700720826ULL;
};

template<class ContainerAllocator>
struct DataType< ::sbg_driver::SbgImuData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sbg_driver/SbgImuData";
  }

  static const char* value(const ::sbg_driver::SbgImuData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sbg_driver::SbgImuData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# SBG Ellipse Messages\n"
"Header header\n"
"\n"
"# Time since sensor is powered up us \n"
"uint32 time_stamp\n"
"\n"
"# IMU Status\n"
"SbgImuStatus imu_status\n"
"\n"
"# Filtered Accelerometer - X, Y, Z axis m/s2 \n"
"geometry_msgs/Vector3 accel\n"
"\n"
"# Filtered Gyroscope - X, Y, Z axis rad/s \n"
"geometry_msgs/Vector3 gyro\n"
"\n"
"# Internal Temperature degC \n"
"float32 temp\n"
"\n"
"# Sculling output - X, Y, Z axis m/s2 \n"
"geometry_msgs/Vector3 delta_vel\n"
"\n"
"# Coning output - X, Y, Z axis rad/s \n"
"geometry_msgs/Vector3 delta_angle\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sbg_driver/SbgImuStatus\n"
"# SBG Ellipse Messages\n"
"# Submessage SbgImuData\n"
"\n"
"# True if the communication with the IMU is ok.\n"
"bool imu_com\n"
"\n"
"# True if internal IMU passes Built In Test (Calibration, CPU)\n"
"bool imu_status\n"
"\n"
"# True if accelerometer X passes Built In Test\n"
"bool imu_accel_x\n"
"\n"
"# True if accelerometer Y passes Built In Test\n"
"bool imu_accel_y\n"
"\n"
"# True if accelerometer Z passes Built In Test\n"
"bool imu_accel_z\n"
"\n"
"# True if gyroscope X passes Built In Test\n"
"bool imu_gyro_x\n"
"\n"
"# True if gyroscope Y passes Built In Test\n"
"bool imu_gyro_y\n"
"\n"
"# True if gyroscope Z passes Built In Test\n"
"bool imu_gyro_z\n"
"\n"
"# True if accelerometers are within operating range\n"
"bool imu_accels_in_range\n"
"\n"
"# True if gyroscopes are within operating range\n"
"bool imu_gyros_in_range\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::sbg_driver::SbgImuData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sbg_driver::SbgImuData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time_stamp);
      stream.next(m.imu_status);
      stream.next(m.accel);
      stream.next(m.gyro);
      stream.next(m.temp);
      stream.next(m.delta_vel);
      stream.next(m.delta_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SbgImuData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sbg_driver::SbgImuData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sbg_driver::SbgImuData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time_stamp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "imu_status: ";
    s << std::endl;
    Printer< ::sbg_driver::SbgImuStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.imu_status);
    s << indent << "accel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.accel);
    s << indent << "gyro: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.gyro);
    s << indent << "temp: ";
    Printer<float>::stream(s, indent + "  ", v.temp);
    s << indent << "delta_vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.delta_vel);
    s << indent << "delta_angle: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.delta_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SBG_DRIVER_MESSAGE_SBGIMUDATA_H
