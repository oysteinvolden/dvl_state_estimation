// Generated by gencpp from file sbg_driver/SbgMagStatus.msg
// DO NOT EDIT!


#ifndef SBG_DRIVER_MESSAGE_SBGMAGSTATUS_H
#define SBG_DRIVER_MESSAGE_SBGMAGSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sbg_driver
{
template <class ContainerAllocator>
struct SbgMagStatus_
{
  typedef SbgMagStatus_<ContainerAllocator> Type;

  SbgMagStatus_()
    : mag_x(false)
    , mag_y(false)
    , mag_z(false)
    , accel_x(false)
    , accel_y(false)
    , accel_z(false)
    , mags_in_range(false)
    , accels_in_range(false)
    , calibration(false)  {
    }
  SbgMagStatus_(const ContainerAllocator& _alloc)
    : mag_x(false)
    , mag_y(false)
    , mag_z(false)
    , accel_x(false)
    , accel_y(false)
    , accel_z(false)
    , mags_in_range(false)
    , accels_in_range(false)
    , calibration(false)  {
  (void)_alloc;
    }



   typedef uint8_t _mag_x_type;
  _mag_x_type mag_x;

   typedef uint8_t _mag_y_type;
  _mag_y_type mag_y;

   typedef uint8_t _mag_z_type;
  _mag_z_type mag_z;

   typedef uint8_t _accel_x_type;
  _accel_x_type accel_x;

   typedef uint8_t _accel_y_type;
  _accel_y_type accel_y;

   typedef uint8_t _accel_z_type;
  _accel_z_type accel_z;

   typedef uint8_t _mags_in_range_type;
  _mags_in_range_type mags_in_range;

   typedef uint8_t _accels_in_range_type;
  _accels_in_range_type accels_in_range;

   typedef uint8_t _calibration_type;
  _calibration_type calibration;





  typedef boost::shared_ptr< ::sbg_driver::SbgMagStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sbg_driver::SbgMagStatus_<ContainerAllocator> const> ConstPtr;

}; // struct SbgMagStatus_

typedef ::sbg_driver::SbgMagStatus_<std::allocator<void> > SbgMagStatus;

typedef boost::shared_ptr< ::sbg_driver::SbgMagStatus > SbgMagStatusPtr;
typedef boost::shared_ptr< ::sbg_driver::SbgMagStatus const> SbgMagStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sbg_driver::SbgMagStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sbg_driver::SbgMagStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sbg_driver::SbgMagStatus_<ContainerAllocator1> & lhs, const ::sbg_driver::SbgMagStatus_<ContainerAllocator2> & rhs)
{
  return lhs.mag_x == rhs.mag_x &&
    lhs.mag_y == rhs.mag_y &&
    lhs.mag_z == rhs.mag_z &&
    lhs.accel_x == rhs.accel_x &&
    lhs.accel_y == rhs.accel_y &&
    lhs.accel_z == rhs.accel_z &&
    lhs.mags_in_range == rhs.mags_in_range &&
    lhs.accels_in_range == rhs.accels_in_range &&
    lhs.calibration == rhs.calibration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sbg_driver::SbgMagStatus_<ContainerAllocator1> & lhs, const ::sbg_driver::SbgMagStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sbg_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sbg_driver::SbgMagStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sbg_driver::SbgMagStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sbg_driver::SbgMagStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sbg_driver::SbgMagStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sbg_driver::SbgMagStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sbg_driver::SbgMagStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sbg_driver::SbgMagStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "057cf294623d5a0b037fdcc47f99e3c4";
  }

  static const char* value(const ::sbg_driver::SbgMagStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x057cf294623d5a0bULL;
  static const uint64_t static_value2 = 0x037fdcc47f99e3c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::sbg_driver::SbgMagStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sbg_driver/SbgMagStatus";
  }

  static const char* value(const ::sbg_driver::SbgMagStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sbg_driver::SbgMagStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# SBG Ellipse Messages\n"
"# Submessage\n"
"\n"
"# True if the magnetometer X has passed the self test.\n"
"bool mag_x\n"
"\n"
"# True if the magnetometer Y has passed the self test.\n"
"bool mag_y\n"
"\n"
"# True if the magnetometer Z has passed the self test.\n"
"bool mag_z\n"
"\n"
"# True if the accelerometer X has passed the self test.\n"
"bool accel_x\n"
"\n"
"# True if the accelerometer Y has passed the self test.\n"
"bool accel_y\n"
"\n"
"# True if the accelerometer Z has passed the self test.\n"
"bool accel_z\n"
"\n"
"# True if magnetometer is not saturated\n"
"bool mags_in_range\n"
"\n"
"# True if accelerometer is not saturated\n"
"bool accels_in_range\n"
"\n"
"# True if magnetometer seems to be calibrated\n"
"bool calibration\n"
;
  }

  static const char* value(const ::sbg_driver::SbgMagStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sbg_driver::SbgMagStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mag_x);
      stream.next(m.mag_y);
      stream.next(m.mag_z);
      stream.next(m.accel_x);
      stream.next(m.accel_y);
      stream.next(m.accel_z);
      stream.next(m.mags_in_range);
      stream.next(m.accels_in_range);
      stream.next(m.calibration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SbgMagStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sbg_driver::SbgMagStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sbg_driver::SbgMagStatus_<ContainerAllocator>& v)
  {
    s << indent << "mag_x: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mag_x);
    s << indent << "mag_y: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mag_y);
    s << indent << "mag_z: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mag_z);
    s << indent << "accel_x: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.accel_x);
    s << indent << "accel_y: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.accel_y);
    s << indent << "accel_z: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.accel_z);
    s << indent << "mags_in_range: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mags_in_range);
    s << indent << "accels_in_range: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.accels_in_range);
    s << indent << "calibration: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.calibration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SBG_DRIVER_MESSAGE_SBGMAGSTATUS_H
