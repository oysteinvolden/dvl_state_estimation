// Generated by gencpp from file sbg_driver/SbgEvent.msg
// DO NOT EDIT!


#ifndef SBG_DRIVER_MESSAGE_SBGEVENT_H
#define SBG_DRIVER_MESSAGE_SBGEVENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace sbg_driver
{
template <class ContainerAllocator>
struct SbgEvent_
{
  typedef SbgEvent_<ContainerAllocator> Type;

  SbgEvent_()
    : header()
    , time_stamp(0)
    , overflow(false)
    , offset_0_valid(false)
    , offset_1_valid(false)
    , offset_2_valid(false)
    , offset_3_valid(false)
    , time_offset_0(0)
    , time_offset_1(0)
    , time_offset_2(0)
    , time_offset_3(0)  {
    }
  SbgEvent_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time_stamp(0)
    , overflow(false)
    , offset_0_valid(false)
    , offset_1_valid(false)
    , offset_2_valid(false)
    , offset_3_valid(false)
    , time_offset_0(0)
    , time_offset_1(0)
    , time_offset_2(0)
    , time_offset_3(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef uint8_t _overflow_type;
  _overflow_type overflow;

   typedef uint8_t _offset_0_valid_type;
  _offset_0_valid_type offset_0_valid;

   typedef uint8_t _offset_1_valid_type;
  _offset_1_valid_type offset_1_valid;

   typedef uint8_t _offset_2_valid_type;
  _offset_2_valid_type offset_2_valid;

   typedef uint8_t _offset_3_valid_type;
  _offset_3_valid_type offset_3_valid;

   typedef uint16_t _time_offset_0_type;
  _time_offset_0_type time_offset_0;

   typedef uint16_t _time_offset_1_type;
  _time_offset_1_type time_offset_1;

   typedef uint16_t _time_offset_2_type;
  _time_offset_2_type time_offset_2;

   typedef uint16_t _time_offset_3_type;
  _time_offset_3_type time_offset_3;





  typedef boost::shared_ptr< ::sbg_driver::SbgEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sbg_driver::SbgEvent_<ContainerAllocator> const> ConstPtr;

}; // struct SbgEvent_

typedef ::sbg_driver::SbgEvent_<std::allocator<void> > SbgEvent;

typedef boost::shared_ptr< ::sbg_driver::SbgEvent > SbgEventPtr;
typedef boost::shared_ptr< ::sbg_driver::SbgEvent const> SbgEventConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sbg_driver::SbgEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sbg_driver::SbgEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sbg_driver::SbgEvent_<ContainerAllocator1> & lhs, const ::sbg_driver::SbgEvent_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.time_stamp == rhs.time_stamp &&
    lhs.overflow == rhs.overflow &&
    lhs.offset_0_valid == rhs.offset_0_valid &&
    lhs.offset_1_valid == rhs.offset_1_valid &&
    lhs.offset_2_valid == rhs.offset_2_valid &&
    lhs.offset_3_valid == rhs.offset_3_valid &&
    lhs.time_offset_0 == rhs.time_offset_0 &&
    lhs.time_offset_1 == rhs.time_offset_1 &&
    lhs.time_offset_2 == rhs.time_offset_2 &&
    lhs.time_offset_3 == rhs.time_offset_3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sbg_driver::SbgEvent_<ContainerAllocator1> & lhs, const ::sbg_driver::SbgEvent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sbg_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sbg_driver::SbgEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sbg_driver::SbgEvent_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sbg_driver::SbgEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sbg_driver::SbgEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sbg_driver::SbgEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sbg_driver::SbgEvent_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sbg_driver::SbgEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "330fcb628fc06f7fd7e2c2276c83adfa";
  }

  static const char* value(const ::sbg_driver::SbgEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x330fcb628fc06f7fULL;
  static const uint64_t static_value2 = 0xd7e2c2276c83adfaULL;
};

template<class ContainerAllocator>
struct DataType< ::sbg_driver::SbgEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sbg_driver/SbgEvent";
  }

  static const char* value(const ::sbg_driver::SbgEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sbg_driver::SbgEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# SBG Ellipse Messages\n"
"Header header\n"
"\n"
"# Time since sensor is powered up us \n"
"uint32 time_stamp\n"
"\n"
"# True if we have received events at a higher rate than 1 kHz.\n"
"bool overflow\n"
"\n"
"# True if at least two events have been received.\n"
"bool offset_0_valid\n"
"\n"
"# True if at least three events have been received.\n"
"bool offset_1_valid\n"
"\n"
"# True if at least four events have been received.\n"
"bool offset_2_valid\n"
"\n"
"# True if five events have been received.\n"
"bool offset_3_valid\n"
"\n"
"\n"
"# Time offset for the second received event. (us)\n"
"uint16 time_offset_0\n"
"\n"
"# Time offset for the third received event. (us)\n"
"uint16 time_offset_1\n"
"\n"
"# Time offset for the fourth received event. (us)\n"
"uint16  time_offset_2\n"
"\n"
"# Time offset for the fifth received event. (us)\n"
"uint16  time_offset_3\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::sbg_driver::SbgEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sbg_driver::SbgEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time_stamp);
      stream.next(m.overflow);
      stream.next(m.offset_0_valid);
      stream.next(m.offset_1_valid);
      stream.next(m.offset_2_valid);
      stream.next(m.offset_3_valid);
      stream.next(m.time_offset_0);
      stream.next(m.time_offset_1);
      stream.next(m.time_offset_2);
      stream.next(m.time_offset_3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SbgEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sbg_driver::SbgEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sbg_driver::SbgEvent_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time_stamp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "overflow: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.overflow);
    s << indent << "offset_0_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.offset_0_valid);
    s << indent << "offset_1_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.offset_1_valid);
    s << indent << "offset_2_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.offset_2_valid);
    s << indent << "offset_3_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.offset_3_valid);
    s << indent << "time_offset_0: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.time_offset_0);
    s << indent << "time_offset_1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.time_offset_1);
    s << indent << "time_offset_2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.time_offset_2);
    s << indent << "time_offset_3: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.time_offset_3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SBG_DRIVER_MESSAGE_SBGEVENT_H
