// Generated by gencpp from file sbg_driver/SbgStatus.msg
// DO NOT EDIT!


#ifndef SBG_DRIVER_MESSAGE_SBGSTATUS_H
#define SBG_DRIVER_MESSAGE_SBGSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sbg_driver/SbgStatusGeneral.h>
#include <sbg_driver/SbgStatusCom.h>
#include <sbg_driver/SbgStatusAiding.h>

namespace sbg_driver
{
template <class ContainerAllocator>
struct SbgStatus_
{
  typedef SbgStatus_<ContainerAllocator> Type;

  SbgStatus_()
    : header()
    , time_stamp(0)
    , status_general()
    , status_com()
    , status_aiding()  {
    }
  SbgStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time_stamp(0)
    , status_general(_alloc)
    , status_com(_alloc)
    , status_aiding(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef  ::sbg_driver::SbgStatusGeneral_<ContainerAllocator>  _status_general_type;
  _status_general_type status_general;

   typedef  ::sbg_driver::SbgStatusCom_<ContainerAllocator>  _status_com_type;
  _status_com_type status_com;

   typedef  ::sbg_driver::SbgStatusAiding_<ContainerAllocator>  _status_aiding_type;
  _status_aiding_type status_aiding;





  typedef boost::shared_ptr< ::sbg_driver::SbgStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sbg_driver::SbgStatus_<ContainerAllocator> const> ConstPtr;

}; // struct SbgStatus_

typedef ::sbg_driver::SbgStatus_<std::allocator<void> > SbgStatus;

typedef boost::shared_ptr< ::sbg_driver::SbgStatus > SbgStatusPtr;
typedef boost::shared_ptr< ::sbg_driver::SbgStatus const> SbgStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sbg_driver::SbgStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sbg_driver::SbgStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sbg_driver::SbgStatus_<ContainerAllocator1> & lhs, const ::sbg_driver::SbgStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.time_stamp == rhs.time_stamp &&
    lhs.status_general == rhs.status_general &&
    lhs.status_com == rhs.status_com &&
    lhs.status_aiding == rhs.status_aiding;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sbg_driver::SbgStatus_<ContainerAllocator1> & lhs, const ::sbg_driver::SbgStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sbg_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sbg_driver::SbgStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sbg_driver::SbgStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sbg_driver::SbgStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sbg_driver::SbgStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sbg_driver::SbgStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sbg_driver::SbgStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sbg_driver::SbgStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1b73c890bd111d40339f4be9a7495e96";
  }

  static const char* value(const ::sbg_driver::SbgStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1b73c890bd111d40ULL;
  static const uint64_t static_value2 = 0x339f4be9a7495e96ULL;
};

template<class ContainerAllocator>
struct DataType< ::sbg_driver::SbgStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sbg_driver/SbgStatus";
  }

  static const char* value(const ::sbg_driver::SbgStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sbg_driver::SbgStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# SBG Ellipse Messages\n"
"\n"
"Header header\n"
"\n"
"# Time since sensor is powered up (in us)\n"
"uint32 time_stamp\n"
"\n"
"# General status bitmask and enums\n"
"SbgStatusGeneral status_general\n"
"\n"
"# Communication status bitmask and enums.\n"
"SbgStatusCom status_com\n"
"\n"
"# Aiding equipments status bitmask and enums.\n"
"SbgStatusAiding status_aiding\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sbg_driver/SbgStatusGeneral\n"
"# SBG Ellipse Messages\n"
"# SbgStatus submessage\n"
"\n"
"# General main power\n"
"# True when main power supply is OK.\n"
"bool main_power\n"
"\n"
"# General imu power\n"
"# True when IMU power supply is OK.\n"
"bool imu_power\n"
"\n"
"# General gps power\n"
"# Set to True when GPS power supply is OK.\n"
"bool gps_power\n"
"\n"
"# General Settings\n"
"# True if settings were correctly loaded\n"
"bool settings\n"
"\n"
"# General Temperature\n"
"# True when temperature is within specified limits.\n"
"bool temperature\n"
"================================================================================\n"
"MSG: sbg_driver/SbgStatusCom\n"
"# SBG Ellipse Messages\n"
"# SbgStatus submessage\n"
"\n"
"# PORT A: False in case of low level communication error.\n"
"bool port_a\n"
"\n"
"# PORT B: False in case of low level communication error.\n"
"bool port_b\n"
"\n"
"# PORT C: False in case of low level communication error.\n"
"bool port_c\n"
"\n"
"# PORT D: False in case of low level communication error.\n"
"bool port_d\n"
"\n"
"# PORT E: False in case of low level communication error.\n"
"bool port_e\n"
"\n"
"# PORT A RX: False in case of saturation on PORT A input\n"
"bool port_a_rx\n"
"\n"
"# PORT A TX: False in case of saturation on PORT A output\n"
"bool port_a_tx\n"
"\n"
"# PORT B RX: False in case of saturation on PORT B input\n"
"bool port_b_rx\n"
"\n"
"# PORT B TX: False in case of saturation on PORT B output\n"
"bool port_b_tx\n"
"\n"
"# PORT C RX: False in case of saturation on PORT C input\n"
"bool port_c_rx\n"
"\n"
"# PORT C TX: False in case of saturation on PORT C output\n"
"bool port_c_tx\n"
"\n"
"# PORT D RX: False in case of saturation on PORT D input\n"
"bool port_d_rx\n"
"\n"
"# PORT D TX: False in case of saturation on PORT D output\n"
"bool port_d_tx\n"
"\n"
"# PORT E RX: False in case of saturation on PORT E input\n"
"bool port_e_rx\n"
"\n"
"# PORT E TX: False in case of saturation on PORT E output\n"
"bool port_e_tx\n"
"\n"
"# CAN RX: False in case of saturation on CAN Bus output buffer\n"
"bool can_rx\n"
"\n"
"# CAN TX: False in case of saturation on CAN Bus input buffer\n"
"bool can_tx\n"
"\n"
"# CAN BUS\n"
"# 0 CAN BUS OFF 		Bus OFF operation due to too much errors.\n"
"# 1 CAN BUS TX_RX_ERR 	Transmit or received error.\n"
"# 2 CAN BUS OK 			The CAN bus is working correctly.\n"
"# 3 CAN BUS ERROR 		A general error has occurred on the CAN bus.\n"
"uint8 can_status\n"
"================================================================================\n"
"MSG: sbg_driver/SbgStatusAiding\n"
"# SBG Ellipse Messages\n"
"# SbgStatus submessage\n"
"\n"
"# AIDING_GPS1_POS_RECV true when valid GPS 1 position data is received\n"
"bool gps1_pos_recv\n"
"\n"
"# AIDING_GPS1_VEL_RECV true when valid GPS 1 velocity data is received\n"
"bool gps1_vel_recv\n"
"\n"
"# AIDING_GPS1_HDT_RECV true when valid GPS 1 true heading data is received\n"
"bool gps1_hdt_recv\n"
"\n"
"# AIDING_GPS1_UTC_RECV true when valid GPS 1 UTC time data is received\n"
"bool gps1_utc_recv\n"
"\n"
"# AIDING_MAG_RECV true when valid Magnetometer data is received\n"
"bool mag_recv\n"
"\n"
"# AIDING_ODO_RECV true when Odometer pulse is received\n"
"bool odo_recv\n"
"\n"
"# AIDING_DVL_RECV true when valid DVL data is received\n"
"bool dvl_recv\n"
;
  }

  static const char* value(const ::sbg_driver::SbgStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sbg_driver::SbgStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time_stamp);
      stream.next(m.status_general);
      stream.next(m.status_com);
      stream.next(m.status_aiding);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SbgStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sbg_driver::SbgStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sbg_driver::SbgStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time_stamp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "status_general: ";
    s << std::endl;
    Printer< ::sbg_driver::SbgStatusGeneral_<ContainerAllocator> >::stream(s, indent + "  ", v.status_general);
    s << indent << "status_com: ";
    s << std::endl;
    Printer< ::sbg_driver::SbgStatusCom_<ContainerAllocator> >::stream(s, indent + "  ", v.status_com);
    s << indent << "status_aiding: ";
    s << std::endl;
    Printer< ::sbg_driver::SbgStatusAiding_<ContainerAllocator> >::stream(s, indent + "  ", v.status_aiding);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SBG_DRIVER_MESSAGE_SBGSTATUS_H
