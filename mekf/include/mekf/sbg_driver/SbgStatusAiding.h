// Generated by gencpp from file sbg_driver/SbgStatusAiding.msg
// DO NOT EDIT!


#ifndef SBG_DRIVER_MESSAGE_SBGSTATUSAIDING_H
#define SBG_DRIVER_MESSAGE_SBGSTATUSAIDING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sbg_driver
{
template <class ContainerAllocator>
struct SbgStatusAiding_
{
  typedef SbgStatusAiding_<ContainerAllocator> Type;

  SbgStatusAiding_()
    : gps1_pos_recv(false)
    , gps1_vel_recv(false)
    , gps1_hdt_recv(false)
    , gps1_utc_recv(false)
    , mag_recv(false)
    , odo_recv(false)
    , dvl_recv(false)  {
    }
  SbgStatusAiding_(const ContainerAllocator& _alloc)
    : gps1_pos_recv(false)
    , gps1_vel_recv(false)
    , gps1_hdt_recv(false)
    , gps1_utc_recv(false)
    , mag_recv(false)
    , odo_recv(false)
    , dvl_recv(false)  {
  (void)_alloc;
    }



   typedef uint8_t _gps1_pos_recv_type;
  _gps1_pos_recv_type gps1_pos_recv;

   typedef uint8_t _gps1_vel_recv_type;
  _gps1_vel_recv_type gps1_vel_recv;

   typedef uint8_t _gps1_hdt_recv_type;
  _gps1_hdt_recv_type gps1_hdt_recv;

   typedef uint8_t _gps1_utc_recv_type;
  _gps1_utc_recv_type gps1_utc_recv;

   typedef uint8_t _mag_recv_type;
  _mag_recv_type mag_recv;

   typedef uint8_t _odo_recv_type;
  _odo_recv_type odo_recv;

   typedef uint8_t _dvl_recv_type;
  _dvl_recv_type dvl_recv;





  typedef boost::shared_ptr< ::sbg_driver::SbgStatusAiding_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sbg_driver::SbgStatusAiding_<ContainerAllocator> const> ConstPtr;

}; // struct SbgStatusAiding_

typedef ::sbg_driver::SbgStatusAiding_<std::allocator<void> > SbgStatusAiding;

typedef boost::shared_ptr< ::sbg_driver::SbgStatusAiding > SbgStatusAidingPtr;
typedef boost::shared_ptr< ::sbg_driver::SbgStatusAiding const> SbgStatusAidingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sbg_driver::SbgStatusAiding_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sbg_driver::SbgStatusAiding_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sbg_driver::SbgStatusAiding_<ContainerAllocator1> & lhs, const ::sbg_driver::SbgStatusAiding_<ContainerAllocator2> & rhs)
{
  return lhs.gps1_pos_recv == rhs.gps1_pos_recv &&
    lhs.gps1_vel_recv == rhs.gps1_vel_recv &&
    lhs.gps1_hdt_recv == rhs.gps1_hdt_recv &&
    lhs.gps1_utc_recv == rhs.gps1_utc_recv &&
    lhs.mag_recv == rhs.mag_recv &&
    lhs.odo_recv == rhs.odo_recv &&
    lhs.dvl_recv == rhs.dvl_recv;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sbg_driver::SbgStatusAiding_<ContainerAllocator1> & lhs, const ::sbg_driver::SbgStatusAiding_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sbg_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sbg_driver::SbgStatusAiding_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sbg_driver::SbgStatusAiding_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sbg_driver::SbgStatusAiding_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sbg_driver::SbgStatusAiding_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sbg_driver::SbgStatusAiding_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sbg_driver::SbgStatusAiding_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sbg_driver::SbgStatusAiding_<ContainerAllocator> >
{
  static const char* value()
  {
    return "873fbacbcfa106e3f518a7cd0cce3cfb";
  }

  static const char* value(const ::sbg_driver::SbgStatusAiding_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x873fbacbcfa106e3ULL;
  static const uint64_t static_value2 = 0xf518a7cd0cce3cfbULL;
};

template<class ContainerAllocator>
struct DataType< ::sbg_driver::SbgStatusAiding_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sbg_driver/SbgStatusAiding";
  }

  static const char* value(const ::sbg_driver::SbgStatusAiding_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sbg_driver::SbgStatusAiding_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# SBG Ellipse Messages\n"
"# SbgStatus submessage\n"
"\n"
"# AIDING_GPS1_POS_RECV true when valid GPS 1 position data is received\n"
"bool gps1_pos_recv\n"
"\n"
"# AIDING_GPS1_VEL_RECV true when valid GPS 1 velocity data is received\n"
"bool gps1_vel_recv\n"
"\n"
"# AIDING_GPS1_HDT_RECV true when valid GPS 1 true heading data is received\n"
"bool gps1_hdt_recv\n"
"\n"
"# AIDING_GPS1_UTC_RECV true when valid GPS 1 UTC time data is received\n"
"bool gps1_utc_recv\n"
"\n"
"# AIDING_MAG_RECV true when valid Magnetometer data is received\n"
"bool mag_recv\n"
"\n"
"# AIDING_ODO_RECV true when Odometer pulse is received\n"
"bool odo_recv\n"
"\n"
"# AIDING_DVL_RECV true when valid DVL data is received\n"
"bool dvl_recv\n"
;
  }

  static const char* value(const ::sbg_driver::SbgStatusAiding_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sbg_driver::SbgStatusAiding_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gps1_pos_recv);
      stream.next(m.gps1_vel_recv);
      stream.next(m.gps1_hdt_recv);
      stream.next(m.gps1_utc_recv);
      stream.next(m.mag_recv);
      stream.next(m.odo_recv);
      stream.next(m.dvl_recv);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SbgStatusAiding_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sbg_driver::SbgStatusAiding_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sbg_driver::SbgStatusAiding_<ContainerAllocator>& v)
  {
    s << indent << "gps1_pos_recv: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps1_pos_recv);
    s << indent << "gps1_vel_recv: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps1_vel_recv);
    s << indent << "gps1_hdt_recv: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps1_hdt_recv);
    s << indent << "gps1_utc_recv: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps1_utc_recv);
    s << indent << "mag_recv: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mag_recv);
    s << indent << "odo_recv: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.odo_recv);
    s << indent << "dvl_recv: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dvl_recv);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SBG_DRIVER_MESSAGE_SBGSTATUSAIDING_H
