// Generated by gencpp from file sbg_driver/SbgEkfStatus.msg
// DO NOT EDIT!


#ifndef SBG_DRIVER_MESSAGE_SBGEKFSTATUS_H
#define SBG_DRIVER_MESSAGE_SBGEKFSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sbg_driver
{
template <class ContainerAllocator>
struct SbgEkfStatus_
{
  typedef SbgEkfStatus_<ContainerAllocator> Type;

  SbgEkfStatus_()
    : solution_mode(0)
    , attitude_valid(false)
    , heading_valid(false)
    , velocity_valid(false)
    , position_valid(false)
    , vert_ref_used(false)
    , mag_ref_used(false)
    , gps1_vel_used(false)
    , gps1_pos_used(false)
    , gps1_course_used(false)
    , gps1_hdt_used(false)
    , gps2_vel_used(false)
    , gps2_pos_used(false)
    , gps2_course_used(false)
    , gps2_hdt_used(false)
    , odo_used(false)  {
    }
  SbgEkfStatus_(const ContainerAllocator& _alloc)
    : solution_mode(0)
    , attitude_valid(false)
    , heading_valid(false)
    , velocity_valid(false)
    , position_valid(false)
    , vert_ref_used(false)
    , mag_ref_used(false)
    , gps1_vel_used(false)
    , gps1_pos_used(false)
    , gps1_course_used(false)
    , gps1_hdt_used(false)
    , gps2_vel_used(false)
    , gps2_pos_used(false)
    , gps2_course_used(false)
    , gps2_hdt_used(false)
    , odo_used(false)  {
  (void)_alloc;
    }



   typedef uint8_t _solution_mode_type;
  _solution_mode_type solution_mode;

   typedef uint8_t _attitude_valid_type;
  _attitude_valid_type attitude_valid;

   typedef uint8_t _heading_valid_type;
  _heading_valid_type heading_valid;

   typedef uint8_t _velocity_valid_type;
  _velocity_valid_type velocity_valid;

   typedef uint8_t _position_valid_type;
  _position_valid_type position_valid;

   typedef uint8_t _vert_ref_used_type;
  _vert_ref_used_type vert_ref_used;

   typedef uint8_t _mag_ref_used_type;
  _mag_ref_used_type mag_ref_used;

   typedef uint8_t _gps1_vel_used_type;
  _gps1_vel_used_type gps1_vel_used;

   typedef uint8_t _gps1_pos_used_type;
  _gps1_pos_used_type gps1_pos_used;

   typedef uint8_t _gps1_course_used_type;
  _gps1_course_used_type gps1_course_used;

   typedef uint8_t _gps1_hdt_used_type;
  _gps1_hdt_used_type gps1_hdt_used;

   typedef uint8_t _gps2_vel_used_type;
  _gps2_vel_used_type gps2_vel_used;

   typedef uint8_t _gps2_pos_used_type;
  _gps2_pos_used_type gps2_pos_used;

   typedef uint8_t _gps2_course_used_type;
  _gps2_course_used_type gps2_course_used;

   typedef uint8_t _gps2_hdt_used_type;
  _gps2_hdt_used_type gps2_hdt_used;

   typedef uint8_t _odo_used_type;
  _odo_used_type odo_used;





  typedef boost::shared_ptr< ::sbg_driver::SbgEkfStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sbg_driver::SbgEkfStatus_<ContainerAllocator> const> ConstPtr;

}; // struct SbgEkfStatus_

typedef ::sbg_driver::SbgEkfStatus_<std::allocator<void> > SbgEkfStatus;

typedef boost::shared_ptr< ::sbg_driver::SbgEkfStatus > SbgEkfStatusPtr;
typedef boost::shared_ptr< ::sbg_driver::SbgEkfStatus const> SbgEkfStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sbg_driver::SbgEkfStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sbg_driver::SbgEkfStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sbg_driver::SbgEkfStatus_<ContainerAllocator1> & lhs, const ::sbg_driver::SbgEkfStatus_<ContainerAllocator2> & rhs)
{
  return lhs.solution_mode == rhs.solution_mode &&
    lhs.attitude_valid == rhs.attitude_valid &&
    lhs.heading_valid == rhs.heading_valid &&
    lhs.velocity_valid == rhs.velocity_valid &&
    lhs.position_valid == rhs.position_valid &&
    lhs.vert_ref_used == rhs.vert_ref_used &&
    lhs.mag_ref_used == rhs.mag_ref_used &&
    lhs.gps1_vel_used == rhs.gps1_vel_used &&
    lhs.gps1_pos_used == rhs.gps1_pos_used &&
    lhs.gps1_course_used == rhs.gps1_course_used &&
    lhs.gps1_hdt_used == rhs.gps1_hdt_used &&
    lhs.gps2_vel_used == rhs.gps2_vel_used &&
    lhs.gps2_pos_used == rhs.gps2_pos_used &&
    lhs.gps2_course_used == rhs.gps2_course_used &&
    lhs.gps2_hdt_used == rhs.gps2_hdt_used &&
    lhs.odo_used == rhs.odo_used;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sbg_driver::SbgEkfStatus_<ContainerAllocator1> & lhs, const ::sbg_driver::SbgEkfStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sbg_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sbg_driver::SbgEkfStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sbg_driver::SbgEkfStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sbg_driver::SbgEkfStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sbg_driver::SbgEkfStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sbg_driver::SbgEkfStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sbg_driver::SbgEkfStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sbg_driver::SbgEkfStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "779a904443daf8f46a24dc18bd3bbedb";
  }

  static const char* value(const ::sbg_driver::SbgEkfStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x779a904443daf8f4ULL;
  static const uint64_t static_value2 = 0x6a24dc18bd3bbedbULL;
};

template<class ContainerAllocator>
struct DataType< ::sbg_driver::SbgEkfStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sbg_driver/SbgEkfStatus";
  }

  static const char* value(const ::sbg_driver::SbgEkfStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sbg_driver::SbgEkfStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# SBG Ellipse Messages\n"
"# Submessage\n"
"\n"
"# Defines the Kalman filter computation mode (see the table 4 below)\n"
"# 0 UNINITIALIZED	The Kalman filter is not initialized and the returned data are all invalid.\n"
"# 1 VERTICAL_GYRO	The Kalman filter only rely on a vertical reference to compute roll and pitch angles. Heading and navigation data drift freely.\n"
"# 2 AHRS			A heading reference is available, the Kalman filter provides full orientation but navigation data drift freely.\n"
"# 3 NAV_VELOCITY	The Kalman filter computes orientation and velocity. Position is freely integrated from velocity estimation.\n"
"# 4 NAV_POSITION	Nominal mode, the Kalman filter computes all parameters (attitude, velocity, position). Absolute position is provided. \n"
"uint8 solution_mode \n"
"\n"
"# True if Attitude data is reliable (Roll/Pitch error < 0,5 deg)\n"
"bool attitude_valid\n"
"\n"
"# True if Heading data is reliable (Heading error < 1 deg)\n"
"bool heading_valid\n"
"\n"
"# True if Velocity data is reliable (velocity error < 1.5 m/s)\n"
"bool velocity_valid\n"
"\n"
"# True if Position data is reliable (Position error < 10m)\n"
"bool position_valid\n"
"\n"
"# True if vertical reference is used in solution (data used and valid since 3s)\n"
"bool vert_ref_used\n"
"\n"
"# True if magnetometer is used in solution (data used and valid since 3s)\n"
"bool mag_ref_used\n"
"\n"
"# True if GPS velocity is used in solution (data used and valid since 3s)\n"
"bool gps1_vel_used\n"
"\n"
"# True if GPS Position is used in solution (data used and valid since 3s)\n"
"bool gps1_pos_used\n"
"\n"
"# True if GPS Course is used in solution (data used and valid since 3s)\n"
"bool gps1_course_used\n"
"\n"
"# True if GPS True Heading is used in solution (data used and valid since 3s)\n"
"bool gps1_hdt_used\n"
"\n"
"# True if GPS2 velocity is used in solution (data used and valid since 3s)\n"
"bool gps2_vel_used\n"
"\n"
"# True if GPS2 Position is used in solution (data used and valid since 3s)\n"
"bool gps2_pos_used\n"
"\n"
"# True if GPS2 Course is used in solution (data used and valid since 3s)\n"
"bool gps2_course_used\n"
"\n"
"# True if GPS2 True Heading is used in solution (data used and valid since 3s)\n"
"bool gps2_hdt_used\n"
"\n"
"# True if Odometer is used in solution (data used and valid since 3s)\n"
"bool odo_used\n"
;
  }

  static const char* value(const ::sbg_driver::SbgEkfStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sbg_driver::SbgEkfStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.solution_mode);
      stream.next(m.attitude_valid);
      stream.next(m.heading_valid);
      stream.next(m.velocity_valid);
      stream.next(m.position_valid);
      stream.next(m.vert_ref_used);
      stream.next(m.mag_ref_used);
      stream.next(m.gps1_vel_used);
      stream.next(m.gps1_pos_used);
      stream.next(m.gps1_course_used);
      stream.next(m.gps1_hdt_used);
      stream.next(m.gps2_vel_used);
      stream.next(m.gps2_pos_used);
      stream.next(m.gps2_course_used);
      stream.next(m.gps2_hdt_used);
      stream.next(m.odo_used);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SbgEkfStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sbg_driver::SbgEkfStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sbg_driver::SbgEkfStatus_<ContainerAllocator>& v)
  {
    s << indent << "solution_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.solution_mode);
    s << indent << "attitude_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.attitude_valid);
    s << indent << "heading_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.heading_valid);
    s << indent << "velocity_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.velocity_valid);
    s << indent << "position_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.position_valid);
    s << indent << "vert_ref_used: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vert_ref_used);
    s << indent << "mag_ref_used: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mag_ref_used);
    s << indent << "gps1_vel_used: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps1_vel_used);
    s << indent << "gps1_pos_used: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps1_pos_used);
    s << indent << "gps1_course_used: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps1_course_used);
    s << indent << "gps1_hdt_used: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps1_hdt_used);
    s << indent << "gps2_vel_used: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps2_vel_used);
    s << indent << "gps2_pos_used: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps2_pos_used);
    s << indent << "gps2_course_used: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps2_course_used);
    s << indent << "gps2_hdt_used: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps2_hdt_used);
    s << indent << "odo_used: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.odo_used);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SBG_DRIVER_MESSAGE_SBGEKFSTATUS_H
