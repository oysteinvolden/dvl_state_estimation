// Generated by gencpp from file sbg_driver/SbgStatusGeneral.msg
// DO NOT EDIT!


#ifndef SBG_DRIVER_MESSAGE_SBGSTATUSGENERAL_H
#define SBG_DRIVER_MESSAGE_SBGSTATUSGENERAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sbg_driver
{
template <class ContainerAllocator>
struct SbgStatusGeneral_
{
  typedef SbgStatusGeneral_<ContainerAllocator> Type;

  SbgStatusGeneral_()
    : main_power(false)
    , imu_power(false)
    , gps_power(false)
    , settings(false)
    , temperature(false)  {
    }
  SbgStatusGeneral_(const ContainerAllocator& _alloc)
    : main_power(false)
    , imu_power(false)
    , gps_power(false)
    , settings(false)
    , temperature(false)  {
  (void)_alloc;
    }



   typedef uint8_t _main_power_type;
  _main_power_type main_power;

   typedef uint8_t _imu_power_type;
  _imu_power_type imu_power;

   typedef uint8_t _gps_power_type;
  _gps_power_type gps_power;

   typedef uint8_t _settings_type;
  _settings_type settings;

   typedef uint8_t _temperature_type;
  _temperature_type temperature;





  typedef boost::shared_ptr< ::sbg_driver::SbgStatusGeneral_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sbg_driver::SbgStatusGeneral_<ContainerAllocator> const> ConstPtr;

}; // struct SbgStatusGeneral_

typedef ::sbg_driver::SbgStatusGeneral_<std::allocator<void> > SbgStatusGeneral;

typedef boost::shared_ptr< ::sbg_driver::SbgStatusGeneral > SbgStatusGeneralPtr;
typedef boost::shared_ptr< ::sbg_driver::SbgStatusGeneral const> SbgStatusGeneralConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sbg_driver::SbgStatusGeneral_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sbg_driver::SbgStatusGeneral_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sbg_driver::SbgStatusGeneral_<ContainerAllocator1> & lhs, const ::sbg_driver::SbgStatusGeneral_<ContainerAllocator2> & rhs)
{
  return lhs.main_power == rhs.main_power &&
    lhs.imu_power == rhs.imu_power &&
    lhs.gps_power == rhs.gps_power &&
    lhs.settings == rhs.settings &&
    lhs.temperature == rhs.temperature;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sbg_driver::SbgStatusGeneral_<ContainerAllocator1> & lhs, const ::sbg_driver::SbgStatusGeneral_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sbg_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sbg_driver::SbgStatusGeneral_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sbg_driver::SbgStatusGeneral_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sbg_driver::SbgStatusGeneral_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sbg_driver::SbgStatusGeneral_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sbg_driver::SbgStatusGeneral_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sbg_driver::SbgStatusGeneral_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sbg_driver::SbgStatusGeneral_<ContainerAllocator> >
{
  static const char* value()
  {
    return "693fdf7e799b5fc52833d1649c048053";
  }

  static const char* value(const ::sbg_driver::SbgStatusGeneral_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x693fdf7e799b5fc5ULL;
  static const uint64_t static_value2 = 0x2833d1649c048053ULL;
};

template<class ContainerAllocator>
struct DataType< ::sbg_driver::SbgStatusGeneral_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sbg_driver/SbgStatusGeneral";
  }

  static const char* value(const ::sbg_driver::SbgStatusGeneral_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sbg_driver::SbgStatusGeneral_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# SBG Ellipse Messages\n"
"# SbgStatus submessage\n"
"\n"
"# General main power\n"
"# True when main power supply is OK.\n"
"bool main_power\n"
"\n"
"# General imu power\n"
"# True when IMU power supply is OK.\n"
"bool imu_power\n"
"\n"
"# General gps power\n"
"# Set to True when GPS power supply is OK.\n"
"bool gps_power\n"
"\n"
"# General Settings\n"
"# True if settings were correctly loaded\n"
"bool settings\n"
"\n"
"# General Temperature\n"
"# True when temperature is within specified limits.\n"
"bool temperature\n"
;
  }

  static const char* value(const ::sbg_driver::SbgStatusGeneral_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sbg_driver::SbgStatusGeneral_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.main_power);
      stream.next(m.imu_power);
      stream.next(m.gps_power);
      stream.next(m.settings);
      stream.next(m.temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SbgStatusGeneral_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sbg_driver::SbgStatusGeneral_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sbg_driver::SbgStatusGeneral_<ContainerAllocator>& v)
  {
    s << indent << "main_power: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.main_power);
    s << indent << "imu_power: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.imu_power);
    s << indent << "gps_power: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps_power);
    s << indent << "settings: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.settings);
    s << indent << "temperature: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temperature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SBG_DRIVER_MESSAGE_SBGSTATUSGENERAL_H
