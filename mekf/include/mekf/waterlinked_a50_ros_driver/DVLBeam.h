// Generated by gencpp from file waterlinked_a50_ros_driver/DVLBeam.msg
// DO NOT EDIT!


#ifndef WATERLINKED_A50_ROS_DRIVER_MESSAGE_DVLBEAM_H
#define WATERLINKED_A50_ROS_DRIVER_MESSAGE_DVLBEAM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace waterlinked_a50_ros_driver
{
template <class ContainerAllocator>
struct DVLBeam_
{
  typedef DVLBeam_<ContainerAllocator> Type;

  DVLBeam_()
    : id(0)
    , velocity(0.0)
    , distance(0.0)
    , rssi(0.0)
    , nsd(0.0)
    , valid(false)  {
    }
  DVLBeam_(const ContainerAllocator& _alloc)
    : id(0)
    , velocity(0.0)
    , distance(0.0)
    , rssi(0.0)
    , nsd(0.0)
    , valid(false)  {
  (void)_alloc;
    }



   typedef int64_t _id_type;
  _id_type id;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef double _distance_type;
  _distance_type distance;

   typedef double _rssi_type;
  _rssi_type rssi;

   typedef double _nsd_type;
  _nsd_type nsd;

   typedef uint8_t _valid_type;
  _valid_type valid;





  typedef boost::shared_ptr< ::waterlinked_a50_ros_driver::DVLBeam_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::waterlinked_a50_ros_driver::DVLBeam_<ContainerAllocator> const> ConstPtr;

}; // struct DVLBeam_

typedef ::waterlinked_a50_ros_driver::DVLBeam_<std::allocator<void> > DVLBeam;

typedef boost::shared_ptr< ::waterlinked_a50_ros_driver::DVLBeam > DVLBeamPtr;
typedef boost::shared_ptr< ::waterlinked_a50_ros_driver::DVLBeam const> DVLBeamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::waterlinked_a50_ros_driver::DVLBeam_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::waterlinked_a50_ros_driver::DVLBeam_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::waterlinked_a50_ros_driver::DVLBeam_<ContainerAllocator1> & lhs, const ::waterlinked_a50_ros_driver::DVLBeam_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.velocity == rhs.velocity &&
    lhs.distance == rhs.distance &&
    lhs.rssi == rhs.rssi &&
    lhs.nsd == rhs.nsd &&
    lhs.valid == rhs.valid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::waterlinked_a50_ros_driver::DVLBeam_<ContainerAllocator1> & lhs, const ::waterlinked_a50_ros_driver::DVLBeam_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace waterlinked_a50_ros_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::waterlinked_a50_ros_driver::DVLBeam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::waterlinked_a50_ros_driver::DVLBeam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::waterlinked_a50_ros_driver::DVLBeam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::waterlinked_a50_ros_driver::DVLBeam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::waterlinked_a50_ros_driver::DVLBeam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::waterlinked_a50_ros_driver::DVLBeam_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::waterlinked_a50_ros_driver::DVLBeam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "750bcc69eae0dec5dc80e15e3ced915b";
  }

  static const char* value(const ::waterlinked_a50_ros_driver::DVLBeam_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x750bcc69eae0dec5ULL;
  static const uint64_t static_value2 = 0xdc80e15e3ced915bULL;
};

template<class ContainerAllocator>
struct DataType< ::waterlinked_a50_ros_driver::DVLBeam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "waterlinked_a50_ros_driver/DVLBeam";
  }

  static const char* value(const ::waterlinked_a50_ros_driver::DVLBeam_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::waterlinked_a50_ros_driver::DVLBeam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Transducer ID\n"
"int64 id\n"
"#Velocity reported by transducer\n"
"float64 velocity\n"
"#Distance value\n"
"float64 distance\n"
"#RSSI\n"
"float64 rssi\n"
"#NSD\n"
"float64 nsd\n"
"#Report if beam is locked on and providing reliable data\n"
"bool valid\n"
;
  }

  static const char* value(const ::waterlinked_a50_ros_driver::DVLBeam_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::waterlinked_a50_ros_driver::DVLBeam_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.velocity);
      stream.next(m.distance);
      stream.next(m.rssi);
      stream.next(m.nsd);
      stream.next(m.valid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DVLBeam_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::waterlinked_a50_ros_driver::DVLBeam_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::waterlinked_a50_ros_driver::DVLBeam_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "rssi: ";
    Printer<double>::stream(s, indent + "  ", v.rssi);
    s << indent << "nsd: ";
    Printer<double>::stream(s, indent + "  ", v.nsd);
    s << indent << "valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WATERLINKED_A50_ROS_DRIVER_MESSAGE_DVLBEAM_H
